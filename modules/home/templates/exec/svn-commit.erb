#!/usr/bin/perl
# Puppet: <%=  __FILE__.gsub(/.*?puppet\//,fqdn + ':') %>

use strict;
use warnings;
use File::Temp qw/tempfile :POSIX/;
use Digest::SHA;
use Term::ANSIColor;

use lib '/home/xani/src/puppet/modules/artegence/files/lib/perl';
use Arte::Puppet::Validate;

my $v = Arte::Puppet::Validate->new({volatile_validation=>1},);
my $last_commit_file = '/tmp/commit';
my $commit_msg_end = '-- END COMMIT MSG --';
my $input_msg = join(' ', @ARGV);
my $conf = {};
my @fail;
$conf->{'notify'} = 1;

# get tmp file for commit msg
my ($editmsg_fh, $editmsg_file) = tempfile('svn-precommit_XXXXXX', SUFFIX => '.diff', DIR => File::Spec->tmpdir);
if ( $input_msg !~ /^\s*$/) {
    $input_msg =~ s/[^\#](\d{16})/ \#$1/g;
    print $editmsg_fh "$input_msg\n";
}
elsif ( -e $last_commit_file) {
    open(LAST_COMMIT, '<', $last_commit_file);
    while(<LAST_COMMIT>) {
        print $editmsg_fh $_;
    }
    close(LAST_COMMIT);
}
else  {
    print $editmsg_fh "\n";
}
print $editmsg_fh "<----------" .  $commit_msg_end . "------->\n";
print $editmsg_fh "Anything below will be ignored in commit msg\n\n";
my $changed_files = ();
open(my $diff, '-|', 'svn diff');
while(<$diff>) {
    print $editmsg_fh $_;
    if ($_ =~ /\+\+\+ (.+)\s+\((.+?)\)$/) {
        push @$changed_files, $1;
    }
}
close($diff);
print $editmsg_fh "\n<---------- CHANGED FILES ------->\n";
foreach my $file (@$changed_files) {
    if (! &validate_file($file)) {
        push @fail, $file
    }
    print $editmsg_fh "File $file\n";
}
close($editmsg_fh);
if(scalar @fail > 0) {
    print "FILE VALIDATION FAILED! bad files:\n";
    print join("\n",@fail);
    print "\n";
    exit 1;
}
if (scalar @$changed_files < 1) {
    print "No files to commit \n";
    exit 0;
}
system($ENV{'EDITOR'}, $editmsg_file);
open($editmsg_fh, '<', $editmsg_file);
my ($commitmsg_fh, $commitmsg_file) = tempfile('svn-commit_XXXXXX', SUFFIX => '.diff', DIR => File::Spec->tmpdir);



my $commitmsg;
while(<$editmsg_fh>) {
    if($_ =~ /$commit_msg_end/) {
        last;
    }
    print $commitmsg_fh $_;
    print $_;
    $commitmsg .= $_;
}
close($commitmsg_fh);
if ($commitmsg =~ /^\s*$/ms) {
    system('notify-send', 'Empty commit message',"Cancelling");
    exit 0;
}
my $msg = "Going to commit " . scalar @$changed_files . " files with commit msg:\n$commitmsg";
$msg .= "is that ok ? ";
if ( defined($conf->{'notify'}) && ! &is_x) {
#    system('notify-send', '-u', 'critical','Commit waiting!',"Commit with msg '$msg' waiting");
    system('notify-send', 'Commit waiting!',"Commit with msg '$' waiting");
}
my $commit_log_tmp = tmpnam();
if( &ask($msg)) {
    print "Commiting\n";
    system("svn commit -F $commitmsg_file 2>&1 |tee $commit_log_tmp");
    # TODO make that use open not silly system
    system("grep -P '(Committed revision|Zatwierdzona wersja)' $commit_log_tmp 2>&1 >/dev/null");
    if ($? == 0)  {
        print "All OK\n";
        if ( defined($conf->{'notify'}) ) {
            system('notify-send', 'Commited successfully!',"All OK");
        }
        if ( -e $last_commit_file ) {
            print "Erasing old commit msg file\n";
            unlink($last_commit_file);
        }
    }
    else {
        print "Commit failed, saving msg in /tmp/commit";
        if ( defined($conf->{'notify'}) ) {
            system('notify-send', '-t', '60000', 'Commit failed!',"Go back and check what failed!");
        }
        system("cp $commitmsg_file /tmp/commit");
    }
} else {
    print "Aborting\n";
    system("cp $commitmsg_file /tmp/commit");
}


sub validate_file {
    my $file = shift;
    system("~/src/svn-puppet/helpers/remote_validate_files.pl $file");
    if($?) {
        return
    }
    return 1;
}

sub ask {
    my $msg = shift;
    if (&is_x) {
        system('zenity','--question',
               '--text', $msg,
               '--ok-label', 'Commit',
               '--cancel-label', 'Nope',
           );
        if($?) {
            return undef;
        }
        else {
            return 1;
        }
    }
    else {
        print $msg;
        my $in = <STDIN>;
        if( $in =~ /(y|t|u)/) { return 1; }
        else { return undef}
    }
}

sub is_x {
    if (defined($ENV{'DISPLAY'}) && $ENV{'DISPLAY'} !~ /^\s*$/) {
        return 1; # probably
    }
    else {
        return undef; # nope
    }
}
