#!/usr/bin/perl
# <%= @puppet_header %>
# <%=  __FILE__.gsub(/.*?puppet\//,@fqdn + ':') %>
use Mojolicious::Lite;

app->secret(scalar time() . '<%= scope.function_md5([scope.function_fqdn_rand([1000000000000000])]) %>');

# Simple plain text response
get '/' => 'routes';

# Route associating "/time" with template in DATA section
get '/time' => 'clock';


get '/ws' => 'ws';

# RESTful web service with JSON and text representation
get '/list/:offset' => sub {
    my $self    = shift;
    my $numbers = [0 .. $self->param('offset')];
    # add header
    $self->res->headers->header('X-Random-Header' => scalar localtime(time));
    $self->respond_to(
        json => {json => $numbers},
        txt  => {text => join(',', @$numbers)}
    );
};

any '/status/#status' => sub {
    my $self = shift;
    my $status = int($self->param('status'));
    if ($status < 100 || $status > 999) {
        $self->render(
            text => "Status must be 100-9999",
        );
        return
    }
    $self->respond_to(
        any => Dump $self->tx->req,
        status => $status,
    )
};
# Scrape information from remote sites
post '/title' => sub {
    my $self = shift;
    my $url  = $self->param('url') || 'http://mojolicio.us';
    $self->render(
        text => $self->ua->get($url)->res->dom->html->head->title->text,
    );
};

# WebSocket echo service
websocket '/echo' => sub {
    my $self = shift;
Mojo::IOLoop->stream($self->tx->connection)->timeout(300);
    $self->on(message => sub {
                  my ($self, $msg) = @_;
                  $self->send("echo: $msg");
              });
};

get '/slow' => sub {
    my $self = shift;

    # Start recurring timer
    my $i  = 1;
    my $id = Mojo::IOLoop->recurring(
        1 => sub {
            $self->write_chunk($i);
            $self->finish if $i++ == 5;
        }
    );

    # Stop recurring timer
    $self->on( finish => sub { Mojo::IOLoop->remove($id) } );
};

app->start;

__DATA__

@@ routes.html.ep
<%= '%' %> my $walk = begin
  <%= '%' %> my ($walk, $route, $depth) = @_;
  <tr>
    <td>
      <%= '%' %> my $pattern = $route->pattern->pattern || '/';
      <%= '%' %> $pattern = "+$pattern" if $depth;
      <pre><<%= '%' %>= '  ' x $depth <%= '%' %>><<%= '%' %>= $pattern <%= '%' %>></pre>
    </td>
    <td>
      <pre><<%= '%' %>= uc(join ',', @{$route->via || []}) || '*' <%= '%' %>></pre>
    </td>
    <td>
      <%= '%' %> my $name = $route->name;
      <pre><<%= '%' %>= $route->has_custom_name ? qq{"$name"} : $name <%= '%' %>></pre>
    </td>
  </tr>
  <%= '%' %> $depth++;
  <%= '%' %>= $walk->($walk, $_, $depth) for @{$route->children};
  <%= '%' %> $depth--;
<%= '%' %> end
<table border=1>
  <tr>
    <th>Pattern</th>
    <th>Methods</th>
    <th>Name</th>
  </tr>
  <%= '%' %>= $walk->($walk, $_, 0) for @{app->routes->children};
</table>

@@ clock.html.ep
<%-%>% use Time::Piece;
<%-%>% my $now = localtime;
The time is "<%%= $now->hms %>"

@@ ws.html.ep
<%-%>% my $host = $self->req->headers->header('Host');
<%-%>% $host ||= '127.0.0.1:3000';
<html>
<head>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script type="text/javascript">
var start;
var ws;
function WebSocketTest()
{
  if ("WebSocket" in window)
  {
     // Let us open a web socket
     ws = new WebSocket("ws://<%= $host %>/echo");
     ws.onopen = function()
     {
        // Web Socket is connected, send data using send()
        start = new Date().getTime();
        ws.send("Message to send");
        $("#sent").html("sent msg");
     };
     ws.onmessage = function (evt)
     {
        var received_msg = evt.data;
        var timediff = new Date().getTime() - start;
        $("#recv").html("RTT: " + timediff + "<br>Received: " +received_msg);
     };
     ws.onclose = function()
     {
        // websocket is closed.
        $("#recv").html("<div style=\"color: red; size:30px\">Connection closed</div>");
     };
  }
  else
  {
     // The browser doesn't support WebSocket
     $("#sent").html("Browser not supported");
  }
}

function WebSocketMsg() {
    start = new Date().getTime();
    ws.send(start);
}
</script>
</head>
<body>
<a href="javascript:WebSocketTest()">Run WebSocket</a><br>
<a href="javascript:WebSocketMsg()">Send msg</a><br>
Sent:<div id='sent'></div><br>
Recv:<div id='recv'></div>

</body>
</html>
