-- This defines some aliases, to make the reports look nicer:
aliases (
	"sun-awt-X11-XFramePeer"  -> "java",
	"sun-awt-X11-XDialogPeer" -> "java",
	"sun-awt-X11-XWindowPeer" -> "java",
        "gramps.py"               -> "gramps",
	"___nforschung"           -> "ahnenforschung"
	)

-- A rule that probably everybody wants. Being inactive for over a minute
-- causes this sample to be ignored by default.
$idle > 90 ==> tag inactive,

-- Simple rule that just tags the current program
tag Program:$current.program,

-- I'd like to know what evolution folders I'm working in. But when sending a
-- mail, the window title only contains the (not very helpful) subject. So I do
-- not tag necessarily by the active window title, but the title that contains
-- the folder
current window $program == "evolution" &&
any window ($program == "evolution" && $title =~ /^(.*) \([0-9]+/)
  ==> tag Evo-Folder:$1,

-- A general rule that works well with gvim and gnome-terminal and tells me
-- what project Im currently working on

current window $title =~ m!.*\/src\/(.*?)\/(.[^/]*).*!
  ==> tag Project:$1-$2,
current window $title =~ m!(S|s)oftical!
   ==> tag Company:Softical,
current window $title =~ m!(M|m)amfirme!
   ==> tag Company:Mamfirme,
current window $title =~ m!(C|c)eferty!
   ==> tag Company:Mamfirme,
current window $title =~ m!(M|m)f[^s]!
   ==> tag Company:Mamfirme,
current window $title =~ m!\@(.+?)[:|\]]!
   ==> tag Host:$1,

-- This was a frequently looked-at pdf-File
-- current window $title =~ m!output.pdf! &&
-- any window ($title =~ /nforschung/)
--   ==> tag Project:ahnenforschung,


-- My diploma thesis is in a different directory
-- current window $title =~ m!(?:~|home/jojo)/dokumente/Uni/DA!
--   ==> tag Project:DA,
-- current window $title =~ m!Diplomarbeit.pdf!
--   ==> tag Project:DA,
-- current window $title =~ m!LoopSubgroupPaper.pdf!
--   ==> tag Project:DA,

-- Out of curiosity: what percentage of my time am I actually coding Haskell?
current window ($program == "gvim" && $title =~ /^[^ ]+\.hs \(/ )
  ==> tag Editing-Haskell,

-- To be able to match on the time of day, I introduce tags for that as well.
-- $time evaluates to local time.
$time >=  2:00 && $time <  8:00 ==> tag time-of-day:night,
$time >=  8:00 && $time < 12:00 ==> tag time-of-day:morning,
$time >= 12:00 && $time < 14:00 ==> tag time-of-day:lunchtime,
$time >= 14:00 && $time < 18:00 ==> tag time-of-day:afternoon,
$time >= 18:00 && $time < 22:00 ==> tag time-of-day:evening,
$time >= 22:00 || $time <  2:00 ==> tag time-of-day:late-evening,

-- This tag always refers to the last 24h
$sampleage <= 24:00 ==> tag last-day,

-- To categorize by calendar periods (months, weeks, or arbitrary periods),
-- I use $date variable, and some auxiliary functions. All these functions
-- evaluate dates in local time. Set TZ environment variable if you need
-- statistics in a different time zone.

-- “format $date” produces a string with the date in ISO 8601 format
-- (YYYY-MM-DD), it may be compared with strings. For example, to match
-- everything on and after a particular date I can use
-- format $date >= "2010-03-19"  ==> tag period:after_a_special_day,

-- “day of month $date” gives the day of month (1..31),
-- “day of week $date” gives a sequence number of the day of week
-- (1..7, Monday is 1):
(day of month $date == 13) && (day of week $date == 5) ==> tag day:friday_13,

-- “month $date” gives a month number (1..12), “year $date” gives a year:
month $date == 1 ==> tag month:January,
month $date == 2 ==> tag month:February,
month $date == 3 ==> tag month:March,
month $date == 4 ==> tag month:April,
month $date == 5 ==> tag month:May,
month $date == 6 ==> tag month:June,
month $date == 7 ==> tag month:July,
month $date == 8 ==> tag month:August,
month $date == 9 ==> tag month:September,
month $date == 10 ==> tag month:October,
month $date == 12 ==> tag month:November,
month $date == 13 ==> tag month:December,
day of week $date == 1 ==> tag day:Monday,
day of week $date == 2 ==> tag day:Tuesday,
day of week $date == 3 ==> tag day:Wednesday,
day of week $date == 4 ==> tag day:Thursday,
day of week $date == 5 ==> tag day:Saturday,
day of week $date == 6 ==> tag day:Sunday,


year $date == 2010 ==> tag year:2010,
